pipeline {
   
 parameters {
 
		booleanParam(name: 'RunJunit', defaultValue: false, description: 'Run testcases')
 
        booleanParam(name: 'DeployEureka', defaultValue: false, description: 'Build/Deploy Eureka')

        booleanParam(name: 'DeployConfigserver', defaultValue: false, description: 'Build/Deploy Config server')

        booleanParam(name: 'DeployZuul', defaultValue: false, description: 'Build/Deploy Zuul api gateway server')

        booleanParam(name: 'DeployUsers', defaultValue: false, description: 'Build/Deploy Users service')

        booleanParam(name: 'DeployBooks', defaultValue: false, description: 'Build/Deploy Books service')
    }
    
    agent any
   
    environment {
    runJunit = "${params.RunJunit}"
	//ENV_NAME = "${env.BRANCH_NAME}"
	deployEureka = "${params.DeployEureka}"
	deployConfig = "${params.DeployConfigserver}"
	deployZuul = "${params.DeployZuul}"
	deployUsers = "${params.DeployUsers}"
	deployBooks = "${params.DeployBooks}"
	//DOCKER_TAG = "Latest"
	
	IMAGE_URL_WITH_TAG_eurekaregistry = "shitijkhanna/discoveryservice"
    registryCredential = 'dockerhub'
    dockerImage = ''
   }
    

   stages { 

	     stage('Checkout') {
         steps {
		 script {
			echo 'Started checkout'
            def scmVars = checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/Shitij-Khanna/Microservices_Spring']]])	
			 env.GIT_COMMIT = scmVars.GIT_COMMIT
			 //echo "env.GIT_COMMIT"
			 echo "${env.GIT_COMMIT}"
				}
			}
		}	
		
     
     
		
	   stage('Deploy Eureka') {
         steps {
		 script {
				if (deployEureka == "true") {
						bat """ 
						cd DiscoveryService
						mvn clean package
						""".stripIndent().trim()
						withCredentials([usernameColonPassword(credentialsId: 'dockerhub', variable: 'dockerhub')]) {
							bat """ docker login -u shitijkhanna -p Shitij1!""".stripIndent().trim()
							bat """ cd DiscoveryService
							docker build . -t ${IMAGE_URL_WITH_TAG_eurekaregistry}:${env.GIT_COMMIT}""".stripIndent().trim()
							bat """ docker push ${IMAGE_URL_WITH_TAG_eurekaregistry}:${env.GIT_COMMIT}""".stripIndent().trim()
							bat 'docker stop eurekaserver'
							bat 'docker rm eurekaserver'
							bat """ docker run -d -p 8010:8010 --network microservicenetwork --name eurekaserver ${IMAGE_URL_WITH_TAG_eurekaregistry}:${env.GIT_COMMIT}""".stripIndent().trim()
							}	
						}
				}
				}
			}
	}
}


